#!/usr/bin/env ruby

require "rubygems"
require "optparse"
require "rest-client"
require "json"
require "pp"

EXIT_OK = 0
EXIT_WARNING = 1
EXIT_CRITICAL = 2
EXIT_UNKNOWN = 3

@@options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options]"

  @@options[:url] = nil
  opts.on("-u", "--url URL", "Target url") do |url|
    @@options[:url] = url
  end
  @@options[:metric] = nil
  opts.on("-m", "--metric NAME", "Metric path string") do |metric|
    @@options[:metric] = metric
  end
  @@options[:duration] = 5
  opts.on("-d", "--duration LENGTH", "Length, in minute of data to parse (default: 5)") do |duration|
    @@options[:duration] = duration
  end
  @@options[:individual] = false
  opts.on("-i", "--individual", "Check warning/critical against each returned target, rather than on total") do |individual|
    @@options[:individual] = individual
  end
  @@options[:warning] = nil
  opts.on("-w", "--warning VALUE", "Warning threshold") do |warning|
    @@options[:warning] = warning
  end
  @@options[:critical] = nil
  opts.on("-c", "--critical VALUE", "Critical threshold") do |critical|
    @@options[:critical] = critical
  end
  opts.on( "-h", "--help", "Display this screen" ) do
    puts opts
    exit
  end
end

optparse.parse!

if (@@options[:url].nil? || @@options[:metric].nil? || @@options[:warning].nil? || @@options[:critical].nil?)
  puts optparse
  exit 2
end

def url
  base_url = @@options[:url]
  metric = @@options[:metric]
  duration = @@options[:duration].to_s
  base_url + "/render/?target=" + metric + "&format=json&from=-" + duration + "mins"
end

data = {}
data["total"] = 0
data["extra_output"] = ""
data["warning_count"] = 0
data["critical_count"] = 0

JSON.parse(RestClient.get(url)).each do |cache|
  data["#{cache['target']}"] = 0
  count = 0
  cache["datapoints"].each do |point|
    unless (point[0].nil?)
      data["#{cache['target']}"] += point[0]
      count += 1
    end
  end
  data["#{cache['target']}"] /= count unless count == 0
  val = data["#{cache['target']}"]
  if (@@options[:individual])

    if (@@options[:critical].to_i >= @@options[:warning].to_i)
      if ( val >= @@options[:critical].to_i )
         data["critical_count"] += 1
         data["extra_output"] += "#{cache['target']} critical at #{val}\n"
      elsif ( data["#{cache['target']}"] >= @@options[:warning].to_i )
         data["warning_count"] += 1
         data["extra_output"] += "#{cache['target']} warning at #{val}\n"
      end
    else
      if ( val <= @@options[:critical].to_i )
         data["critical_count"] += 1
         data["extra_output"] += "#{cache['target']} critical at #{val}\n"
      elsif ( data["#{cache['target']}"] <= @@options[:warning].to_i )
         data["warning_count"] += 1
         data["extra_output"] += "#{cache['target']} warning at #{val}\n"
      end
    end

  end
  data["total"] += data["#{cache['target']}"]
end

#pp data

total = data["total"].to_i

if (@@options[:individual]) 
    if data["critical_count"] > 0 
      puts "CRITICAL individual metric count: #{data["critical_count"]}"
      puts data["extra_output"]
      exit EXIT_CRITICAL
    elsif data["warning_count"] > 0 
      puts "WARNING individual metric count: #{data["warning_count"]}"
      puts data["extra_output"]
      exit EXIT_WARNING
    else
      puts "OK metric count: #{total}"
      exit EXIT_OK
    end

else
  if (@@options[:critical].to_i > @@options[:warning].to_i)
    if (total >= @@options[:critical].to_i)
      puts "CRITICAL metric count: #{total}"
      exit EXIT_CRITICAL
    elsif (total >= @@options[:warning].to_i)
      puts "WARNING metric count: #{total}"
      exit EXIT_WARNING
    else
      puts "OK metric count: #{total}"
      exit EXIT_OK
    end
  else
    if (total <= @@options[:critical].to_i)
      puts "CRITICAL metric count: #{total}"
      exit EXIT_CRITICAL
    elsif (total <= @@options[:warning].to_i)
      puts "WARNING metric count: #{total}"
      exit EXIT_WARNING
    else
      puts "OK metric count: #{total}"
      exit EXIT_OK
    end
  end
end
